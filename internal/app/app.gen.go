// Package app provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package app

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
)

// Album defines model for Album.
type Album struct {
	ArtistName string `json:"artist_name"`
	ImageUrl   string `json:"image_url"`
	Title      string `json:"title"`
}

// AlbumList defines model for AlbumList.
type AlbumList struct {
	Data []Album `json:"data"`
}

// GetV1ArtistArtistAlbumTitleParams defines parameters for GetV1ArtistArtistAlbumTitle.
type GetV1ArtistArtistAlbumTitleParams struct {

	// the size in px of the width and height
	Size *int `json:"size,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all albums saved in cache.
	// (GET /v1/artist/{artist}/album/{title})
	GetV1ArtistArtistAlbumTitle(w http.ResponseWriter, r *http.Request, artist string, title string, params GetV1ArtistArtistAlbumTitleParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV1ArtistArtistAlbumTitle operation middleware
func (siw *ServerInterfaceWrapper) GetV1ArtistArtistAlbumTitle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "artist" -------------
	var artist string

	err = runtime.BindStyledParameter("simple", false, "artist", chi.URLParam(r, "artist"), &artist)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter artist: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "title" -------------
	var title string

	err = runtime.BindStyledParameter("simple", false, "title", chi.URLParam(r, "title"), &title)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter title: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ArtistArtistAlbumTitleParams

	// ------------- Optional query parameter "size" -------------
	if paramValue := r.URL.Query().Get("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter size: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetV1ArtistArtistAlbumTitle(w, r.WithContext(ctx), artist, title, params)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get("/v1/artist/{artist}/album/{title}", wrapper.GetV1ArtistArtistAlbumTitle)
	})

	return r
}

